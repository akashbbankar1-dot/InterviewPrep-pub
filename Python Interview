Python Interview Question and Answer

1. Is Python a compiled language or an interpreted language?
---> Python is an interpreted language, but it first compiles source code into bytecode, which is then executed by the Python Virtual Machine (PVM). 
     The compilation step is automatic and hidden from the user, which is why it’s usually called an interpreted language.
2. How can you concatenate two lists in Python?
---> We can concatenate two lists in Python using the +operator or the extend() method.
    1. Using the + operator:
    This creates a new list by joining two lists together.
    a = [1, 2, 3]
    b = [4, 5, 6]
    res = a + b
    print(res)
    Output
    [1, 2, 3, 4, 5, 6]
    2. Using the extend() method:
    This adds all the elements of the second list to the first list in-place.
    a = [1, 2, 3]
    b = [4, 5, 6]
    a.extend(b)
    print(a)
    Output
    [1, 2, 3, 4, 5, 6]

3. Difference between for loop and while loop in Python?
---> for loop → Used when you know the number of iterations or are iterating over a sequence (list, tuple, string, range, etc.).
    while loop → Used when you don’t know in advance how many times you need to loop; it runs until a condition becomes False.

4.  What is the difference between / and // in Python?
---> / represents precise division (result is a floating point number) whereas // represents floor division (result is an integer). 
    For Example:print(5//2)  ---> 2
                print(5/2)  ---> 2.5

5. Can we Pass a function as an argument in Python?
---> Yes,  Functions can be passed as parameters to other functions because they are objects. Higher-order functions are functions that can take other functions as arguments.
    example:- 
    def add(x, y):
    return x + y
    def apply_func(func, a, b):
        return func(a, b)
    
    print(apply_func(add, 3, 5))

6. What is a dynamically typed language?
---> In a dynamically typed language, the data type of a variable is determined at runtime, not at compile time.
      No need to declare data types manually; Python automatically detects it based on the assigned value.
      Examples of dynamically typed languages: Python, JavaScript.
      Examples of statically typed languages: C, C++, Java.
      Dynamically typed languages are easier and faster to code.
      Statically typed languages are usually faster to execute due to type checking at compile time.

7. What is pass in Python?
    The pass statement is a placeholder that does nothing.
    It is used when a statement is syntactically required but no code needs to run.
    Commonly used when defining empty functions, classes or loops during development.

8. How are arguments passed by value or by reference in Python?
---> Python’s argument-passing model is neither “Pass by Value” nor “Pass by Reference” but it is “Pass by Object Reference”. 
      Depending on the type of object you pass in the function, the function behaves differently. Immutable objects show “pass by value” whereas mutable objects show “pass by reference”.
      Example:- 
      def call_by_val(x):
          x = x * 2
          return x
      def call_by_ref(b):
          b.append("D")
          return b
      a = ["E"]
      num = 6
      # Call functions
      updated_num = call_by_val(num)
      updated_list = call_by_ref(a)
      # Print after function calls
      print("Updated value after call_by_val:", updated_num)
      print("Updated list after call_by_ref:", updated_list)

9. What is a lambda function?
---> A lambda function is an anonymous function. This function can have any number of parameters but, can have just one statement.
syntax:- lambda arguments: expression

10. What is List Comprehension? Give an Example.
---> t allows us to generate a new list by applying an expression to each item in an existing iterable (such as a list or range). This helps us to write cleaner, 
     more readable code compared to traditional looping techniques.
     Syntax:- [expression for item in iterable if condition]

11. What are *args and **kwargs?
---> *args and **kwargs are used in function definitions to pass a variable number of arguments.
     *args – Variable-Length Positional Arguments
     example:-
     def add_numbers(*args):
         return sum(args)
     
     print(add_numbers(2, 3))        # 5
     print(add_numbers(1, 2, 3, 4))  # 10
     **kwargs – Variable-Length Keyword Arguments
     def print_details(**kwargs):
         for key, value in kwargs.items():
             print(f"{key}: {value}")
     
     print_details(name="Akash", role="Developer", exp=4)

12. What is a break, continue and pass in Python? 
     Break statementis used to terminate the loop or statement in which it is present. After that, the control will pass to the statements that are present after the break statement, if available.
     Continue is also a loop control statement just like the break statement. continue statement is opposite to that of the break statement, instead of terminating the loop, it forces to execute the next iteration of the loop.
     Passmeans performing no operation or in other words, it is a placeholder in the compound statement, where there should be a blank left and nothing has to be written there.

13. What is the difference between a Set and Dictionary?
     A Python Set is an unordered collection data type that is iterable, mutable and has no duplicate elements. Python’s set class represents the mathematical notion of a set.
     Syntax: Defined using curly braces {} or the set() function.
     my_set = {1, 2, 3}
     
     Dictionary in Python is an ordered (since Py 3.7) [unordered (Py 3.6 & prior)] collection of data values, used to store data values like a map, which, unlike other Data Types that hold only a single value as an element, Dictionary holds key:value pair. Key-value is provided in the dictionary to make it more optimized.
     Syntax: Defined using curly braces {} with key-value pairs.
     my_dict = {"a": 1, "b": 2, "c": 3}

14. What is the difference between a Mutable datatype and an Immutable data type?
     Mutable data types can be edited i.e., they can change at runtime. Eg – List, Dictionary, etc.
     Immutable data types can not be edited i.e., they can not change at runtime. Eg – String, Tuple, etc.

15. What is a Variable Scope in Python?
---> The location where we can find a variable and also access it if required is called the scope of a variable.
     Python Local variable: Local variables are those that are initialized within a function and are unique to that function. A local variable cannot be accessed outside of the function.
     Python Global variables: Global variables are the ones that are defined and declared outside any function and are not specified to any function.
     Built-in → Names preassigned by Python (e.g., len, print).

16. How is a dictionary different from a list?
     A list is an ordered collection of items accessed by their index, while a dictionary is an unordered collection of key-value pairs accessed using unique keys. 
     Lists are ideal for sequential data, whereas dictionaries are better for associative data. 
     For example, a list can store [10, 20, 30], whereas a dictionary can store {"a": 10, "b": 20, "c": 30}.

17. What is docstring in Python?
     Python documentation strings (or docstrings) provide a convenient way of associating documentation with Python modules, functions, classes and methods.
     Declaring Docstrings: The docstrings are declared using ”’triple single quotes”’ or “””triple double quotes””” just below the class, method, or function declaration. All functions should have a docstring.
     Accessing Docstrings: The docstrings can be accessed using the __doc__ method of the object or using the help function.

18. How is Exceptional handling done in Python?
     There are 3 main keywords i.e. try, except and finally which are used to catch exceptions:
     try: A block of code that is monitored for errors.
     except: Executes when an error occurs in the try block.
     finally: Executes after the try and except blocks, regardless of whether an error occurred. It’s used for cleanup tasks.

19. What is the difference between Python Arrays and Lists?
     Arrays (when talking about the array module in Python) are specifically used to store a collection of numeric elements that are all of the same type. This makes them more efficient for storing large amounts of data and performing numerical computations where the type consistency is maintained.
     Syntax: Need to import the array module to use arrays.
     Lists are more flexible than arrays in that they can hold elements of different types (integers, strings, objects, etc.). They come built-in with Python and do not require importing any additional modules.
     Lists support a variety of operations that can modify the list.
20. What are Modules and Packages in Python?
     A module is a single file that contains Python code (functions, variables, classes) which can be reused in other programs. 
     You can think of it as a code library. For example: math is a built-in module that provides math functions like sqrt(), pi, etc.
     package is a collection of related modules stored in a directory. It helps in organizing and grouping modules together for easier management. 
     For example: The numpy package contains multiple modules for numerical operations.

21. What is Dictionary Comprehension? Give an Example
     Dictionary Comprehension is a syntax construction to ease the creation of a dictionary based on the existing iterable.

22. Is Tuple Comprehension possible in Python? If yes, how and if not why?
     Tuple comprehensions are not directly supported, Python's existing features like generator expressions and the tuple() function provide flexible alternatives for creating tuples from iterable data.

23. Differentiate between List and Tuple?
     Let’s analyze the differences between List and Tuple:
     List:-
     Lists are Mutable datatype.
     Lists consume more memory
     The list is better for performing operations, such as insertion and deletion.
     The implication of iterations is Time-consuming
     Tuple:-
     Tuples are Immutable datatype.
     Tuple consumes less memory as compared to the list
     A Tuple data type is appropriate for accessing the elements
     The implication of iterations is comparatively Faster

24. What is the difference between a shallow copy and a deep copy?
     Below is the tabular Difference between the Shallow Copy and Deep Copy:
     
     Shallow Copy	                                                                                 Deep Copy
     Shallow Copy stores the references of objects to the original memory address.   	               Deep copy stores copies of the object’s value.
     Shallow Copy reflects changes made to the new/copied object in the original object.	               Deep copy doesn’t reflect changes made to the new/copied object in the original object.
     Shallow Copy stores the copy of the original object and points the references to the objects.	     Deep copy stores the copy of the original object and recursively copies the objects as well.
     A shallow copy is faster.	                                                                      Deep copy is comparatively slower.

25. What are Decorators?
     Decorators are a powerful and flexible way to modify or extend the behavior of functions or methods, without changing their actual code. A decorator is essentially a function that takes another function as an argument and returns a new function with enhanced functionality.
     Decorators are often used in scenarios such as logging, authentication and memorization, allowing us to add additional functionality to existing functions or methods in a clean, reusable way.

26. How do you debug a Python program?
     1. Using pdb (Python Debugger):
     pdb is a built-in module that allows you to set breakpoints and step through the code line by line. You can start the debugger by adding import pdb; pdb.set_trace() in your code where you want to begin debugging.

27. What are Iterators in Python?
     In Python, iterators are used to iterate a group of elements, containers like a list. Iterators are collections of items and they can be a list, tuples, or a dictionary. 
     Python iterator implements __itr__ and the next() method to iterate the stored elements. We generally use loops to iterate over the collections (list, tuple) in Python.

28. What are Generators in Python?
     In Python, the generator is a way that specifies how to implement iterators. It is a normal function except that it yields expression in the function. It does not implement __itr__ and __next__ method and reduces other overheads as well.
     If a function contains at least a yield statement, it becomes a generator. The yield keyword pauses the current execution by saving its states and then resumes from the same when required.

29. What is Polymorphism in Python?
---> Poly means Many morphism means forms it means many forms. for example we can use + operator for multiple purpose like for concatination and arithmatic addition and * operator use for multiplication and repeatayion purpose.

30. Define encapsulation in Python?
---> Encapsulation means binding a code into single unit that is know as encapsulation. for example function, classes are the encapsulation we can write a code in that and we can call it for multiple purpose.

31. How do you do data abstraction in Python?
---> Abstraction means hinding something from enduser. for example we have created a e commerce website so enduser is only aware about UI(User Interface) of that website dont aware about backend how it is working that means we are hiding backend functionality from end user that how database is commuting with code.

32. How is memory management done in Python?
---> Memory management done in python by using memory manager. memory allocated by memory manager in the form of private heap space. all object, data structure store in heap space.
     Even the programmer can not access this private space as the interpreter takes care of this space. 
     Python also has an inbuilt garbage collector, which recycles all the unused memory and frees the memory and makes it available to the heap space.

33. What is slicing in Python?
---> slicing means a pieace that means extracting a part of string or list.
     syntax:- s[start:end:step]

34.What is a namespace in Python?
---> A Namespace is a container that holds name (identifier) mapped to object.
     When you create a variable, function, or class, Python stores its name in a namespace.
     The namespace maps the name to the object’s memory location.
     Built-in Namespace:- Contains Python’s built-in functions and constants.Example: len(), print(), type()
     Global Namespace:- Holds variables and functions defined at the top level.

35. What are Pickling and Unpickling?
     Pickling: The pickle module converts any Python object into a byte stream (not a string representation). This byte stream can then be stored in a file, sent over a network, or saved for later use. The function used for pickling is pickle.dump().
     Unpickling: The process of retrieving the original Python object from the byte stream (saved during pickling) is called unpickling. The function used for unpickling is pickle.load().

36. What is the difference between @classmethod, @staticmethod and instance methods in Python?
---> 1) instance method:- Instance method operate on instance of the class and has access to instance attributes and takes self as the first parameter. Example: def method(self): 
     2) Class method:- class method operates on class itself and not on instance. and it takes cls as first argument and we can define class method by @classmethod decorator.
     3) Static method:- static method is not operates on instance or class it is general utility method. we can declare static method by @staticmethod decorator.

37. What is __init__() in Python and how does self play a role in it?
---> __init__() it is constructor in python it takes self as a first argument. we can use constructor for declare and intialise instance variable.
     Once we declare a constructor it will automatically called at the time of object creation.
     every object contructor called automaticaaly.

38. What are Access Specifiers in Python?
---> In Python, access specifiers define how accessible a class’s attributes and methods are from outside the class.
     Public Access Modifier: The members of a class that are declared public are easily accessible from any part of the program. All data members and member functions of a class are public by default. 
     Protected Access Modifier: The members of a class that are declared protected are only accessible to a class derived from it. All data members of a class are declared protected by adding a single underscore '_' symbol before the data members of that class. 
     Private Access Modifier: The members of a class that are declared private are accessible within the class only, the private access modifier is the most secure access modifier. Data members of a class are declared private by adding a double underscore ‘__’ symbol before the data member of that class. 

39. What are Function Annotations in Python?
---> Function annotations in Python are a way to attach metadata to a function’s parameters and return value.
     They don’t affect how the function works — they’re mainly for documentation, type hints, and tooling.
     def function_name(param1: annotation, param2: annotation = default) -> return_annotation:
         pass

40. What are Exception Groups in Python?
---> ExceptionGroup is a collection/group of different kinds of Exception. Without creating Multiple Exceptions we can group together different Exceptions which we can later fetch one by one whenever necessary, the order in which the Exceptions are stored in the Exception Group doesn’t matter while calling them.
          try:
          raise ExceptionGroup('Example ExceptionGroup', (
          TypeError('Example TypeError'),
          ValueError('Example ValueError'),
          KeyError('Example KeyError'),
          AttributeError('Example AttributeError')
          ))
          except* TypeError:
          ...
          except* ValueError as e:
          ...
          except* (KeyError, AttributeError) as e:
          ...

41. Difference between is and ==?
---> is we can use for memory comparision whearas == we can use for content comparision.

42. How do you manage packages and dependencies in Python?
---> Using tools like pip for package installation, virtualenv or venv for isolated environments, and requirements.txt files to specify dependencies.

43. What are generators and how do they differ from normal functions?
---> Generators are functions that return an iterator using the yield statement instead of return. They generate items one at a time and maintain state between calls, making them memory efficient for large datasets.

44. Explain how Python’s with statement works.
     The with statement simplifies exception handling by encapsulating common preparation and cleanup tasks, typically for resources like files or network connections. It uses context managers that define __enter__ and __exit__ methods.
     Example:
     with open('file.txt', 'r') as file:
         data = file.read()

45.  What are metaclasses in Python?
---> Metaclasse is a classess of classes in python. just like objects are instance of classess, classess are themself instances of metaclases. The default metaclass in Python is type, which creates all classes behind the scenes.
     use case:- Automatically add or modify class attributes or methods when the class is defined.

46. Explain the difference between raise and assert.
     raise is used to explicitly throw exceptions.
     assert is used to test if a condition is true, and if not, raises an AssertionError. Usually used for debugging.

47. What is monkey patching in Python?
---> Monkey patching it means that if we want to change code at the runtime that time we can use monkey patch. usually by modifying classes or modules after they’ve been defined.

     class Monkey:
         def test(self):
             return 'test method'
         
     m = Monkey()
     print(m.test())
     
     def patch(self):
         return 'This is patch method'
     
     Monkey.test = patch
     print(m.test())

48. What is @property in python?
---> @property we can use to access method like an attribute.
     class A:
         def __init__(self,name) :
             self._name = name

         @property
         def name(self):
             return self._name
     a= A('ak')
     print(a.name)

49. 








